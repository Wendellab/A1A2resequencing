#+TITLE: Population Structure Analysis using STRUCTURE and LEA
#+PROPERTY:  header-args :var DIR=(file-name-directory buffer-file-name)

* Results

| Dataset  | STRUCTURE K |  LEA K |
|----------+-------------+--------|
| filtered |           2 |      3 |
| all      |           3 |      7 |
| A2       |           4 | 2 or 3 |

* Creating STRUCTURE input

The resulting STRUCTURE file format is

- one header line containing marker names
- one header line containing distances between markers
- one line per individuals with
  - one column for individual name
  - one column for population information
  - two columns per marker

Plink gives each individual its own population; =add_population.py= replaces the
population column based on whether the individual is in =A1.txt= or =A2.txt=.
These files are at the bottom of this README since they take up a lot of space
in the file.

#+COMMENT: Run with RAW_VCF="file.vcf" ./filter_SNPs.sh. Change the line numbers for renaming and shuffling as appropriate.
#+begin_src sh :tangle scripts/filter_SNPs.sh
cd $DIR
ROOT=$(git rev-parse --show-toplevel)

# remove loci with more than 10% missing data
ml singularity vcftools
vcftools --gzvcf $RAW_VCF \
    --max-missing 0.1 \
    --recode \
    --recode-INFO-all \
    --out remove_missing

# remove individuals with more than 95% missing data
vcftools --vcf remove_missing.recode.vcf --missing-indv
awk 'NR != 1 {$5 > 0.95}' out.imiss > remove.indv
vcftools --vcf remove_missing.recode.vcf \
    --remove remove.indv \
    --recode \
    --recode-INFO-all \
    --out remove_missing_indv

# rename individuals to remove "_" characters; the "_" character caused
# plink to assume that names like A1_019 and A2_019 were two sexes of
# the same species 019
sed -e '41s/_//g' remove_missing_indv.recode.vcf > remove_missing_indv.rename.vcf

# print the VCF header and randomly sample 10,000 lines of loci from the VCF
(head -n 41 remove_missing_indv.rename.vcf && (tail -n +42 remove_missing_indv.rename.vcf | shuf -n 10000 | sort -V -k1,1b -k2,2)) > remove_missing_indv.rename.sample.vcf

# convert the subset of data to a STRUCTURE-formatted file
singularity exec -B `pwd` plink_1.90b6.18--h516909a_0.sif plink --vcf remove_missing_indv.rename.sample.vcf \
    --recode structure \
    --out structure \
    --allow-extra-chr \
    --set-missing-var-ids @_#

# add population information based on the contents of A1.txt and A2.txt
python add_population.py structure.recode.strct_in data/populations.txt > structure.strct_in
#+end_src

#+COMMENT: Reads a TSV with population info and replaces plink-generated pop info with correct info.
#+begin_src python :tangle scripts/add_population.py
import sys

populations = {}
with open(sys.argv[2]) as population_file:
    for line in population_file:
        data = line.strip('\n').split('\t')
        populations[data[0]] = data[1]

with open(sys.argv[1]) as structure_file:
    header = structure_file.readline().strip("\n")
    distance = structure_file.readline().strip("\n")

    print(header)
    print(distance)
    for line in structure_file:
        data = line.strip("\n").split(" ")
        if data[0] in populations:
            data[1] = populations[data[0]]
        else:
            sys.stderr.write("ERROR: no population information available.\t")
            sys.stderr.write(data[0]+"\n")
        print(" ".join(data))

#+end_src

* STRUCTURE

** Helper script

Don't run this on its own. The script in the "Running STRUCTURE" section uses it.

This block takes three variables as input.

- $1 :: highest K to run
- $2 :: path to directory containing input data (output will be written here)
- $3 :: number of individuals in input data

The number of loci is assumed to be 10000, since the filtering step samples to
10000 loci. The number of replicates is 16. Change number or replicates as
necessary.

Output is written in the form of structure.$k.$rep.strct_out.
Logs are written in the form of structure.$k.$rep.log.

#+begin_src sh :tangle scripts/structure.sh
for rep in {1..16}; do
  for (( k=1; k<=$1; k++ )); do
      echo "singularity exec -B $DIR -B $2 structure:2.3.4--0 structure -i $2/structure.strct_in \
          -N $3 \
          -L 10000 \
          -K $k \
          -o $2/structure.$k.$rep.strct_out \
          > $2/structure.$k.$rep.log";
  done;
done;
#+end_src

** Running STRUCTURE

This block generates the STRUCTURE input file and moves it to the
STRUCTURE/A1A2/ directory and runs STRUCTURE for K = 1 through K = 10, with 16
replicates each. Call this script with `CPUs=n ./scripts/A1A2.sh`. If
copy/pasting instead of tangling, define =DIR= as the same directory where this
README is stored.

#+begin_src sh :tangle scripts/A1A2.sh
cd $DIR
ROOT=$(git rev-parse --show-toplevel)

ml singularity
mkdir -p $DIR/STRUCTURE/A1A2/
$DIR/scripts/filter_SNPs.sh
mv structure.strct_in $DIR/STRUCTURE/A1A2/

$DIR/scripts/structure.sh 10 $DIR/STRUCTURE/A1A2/ 120 > $DIR/A1A2.runs.txt
cat $DIR/A1A2.runs.txt | xargs -i -n1 -P $CPUs sh -c {}
#+end_src

This block assumes that =filter_SNPs.sh= has already been run and that
=structure.strct_in= may have already been moved to =$DIR/STRUCTURE/A1A2=. It
recreates =structure.strct_in= from the intermediate files and adds population
information to the file, then filters the file to select only A2 individuals.
This filtered file is placed in the STRUCTURE/A2 directory, and STRUCTURE is run
from k = 1 through k = 5. The A2 analysis was run with 8 replicates.

#+begin_src sh :tangle scripts/A2.sh
cd $DIR
ROOT=$(git rev-parse --show-toplevel)
ml singularity vcftools
mkdir -p $DIR/STRUCTURE/A2/

singularity exec -B `pwd` plink_1.90b6.18--h516909a_0.sif plink --vcf remove_missing_indv.rename.sample.vcf \
    --recode structure \
    --out structure \
    --allow-extra-chr \
    --set-missing-var-ids @_#
python scripts/add_population.py structure.recode.strct_in > structure.strct_in
(head -n2 structure.strct_in && grep -f $DIR/data/A2.txt structure.strct_in) > $DIR/STRUCTURE/A2/structure.strct_in

$DIR/scripts/structure.sh 5 $DIR/STRUCTURE/A2/ 99
#+end_src

This script filters the full VCF, samples it to 10000 loci, converts it to
STRUCTURE input, adds populations info, and drops F1. Then, it runs STRUCTURE
for K=1 to K=10 with 16 replicates.
#+begin_src sh :tangle scripts/A1A2_all_filtered.sh
cd $DIR
ROOT=$(git rev-parse --show-toplevel)

mkdir -p $DIR/STRUCTURE/A1A2_all_filtered/

# remove loci with more than 10% missing data
ml singularity/3.5.2 vcftools
vcftools --vcf $RAW_VCF \
    --max-missing 0.1 \
    --recode \
    --recode-INFO-all \
    --out remove_missing

# remove individuals with more than 95% missing data
vcftools --vcf remove_missing.recode.vcf --missing-indv
awk 'NR != 1 {$5 > 0.95}' out.imiss > remove.indv
vcftools --vcf remove_missing.recode.vcf \
    --remove remove.indv \
    --recode \
    --recode-INFO-all \
    --out remove_missing_indv

# rename individuals to remove "_" characters; the "_" character caused
# plink to assume that names like A1_019 and A2_019 were two sexes of
# the same species 019
sed -e '41s/_//g' remove_missing_indv.recode.vcf > remove_missing_indv.rename.vcf

# print the VCF header and randomly sample 10,000 lines of loci from the VCF
(head -n 41 remove_missing_indv.rename.vcf && (tail -n +42 remove_missing_indv.rename.vcf | shuf -n 10000 | sort -V -k1,1b -k2,2)) > remove_missing_indv.rename.sample.vcf

# convert the subset of data to a STRUCTURE-formatted file
singularity exec -B `pwd` plink_1.90b6.18--h516909a_0.sif plink --vcf remove_missing_indv.rename.sample.vcf \
    --recode structure \
    --out structure \
    --allow-extra-chr \
    --set-missing-var-ids @_#

# add population information based on the contents of A1.txt and A2.txt
python $DIR/scripts/add_population.py $DIR/structure.recode.strct_in $DIR/data/populations.all.txt> $DIR/structure.strct_in
(head -n2 structure.strct_in && grep -v F1 structure.strct_in) > $DIR/STRUCTURE/A1A2_all_filtered/structure.strct_in

$DIR/scripts/structure.sh 10 $DIR/STRUCTURE/A1A2_all_filtered/ 372 > $DIR/A1A2_all_filtered.runs.txt
cat $DIR/A1A2_all_filtered.runs.txt | xargs -i -n1 -P $CPUs sh -c {}
#+end_src

** STRUCTURE Harvester

ZIP the STRUCTURE results for a dataset (only the strct_out_f files are
necessary) and upload to [[http://taylor0.biology.ucla.edu/structureHarvester/#][STRUCTURE Harvester]].

** Visualization

Run with =Rscript scripts/STRUCTURE.R structure.best_k.1.strct_out_f population_file.txt=.
=population_file.txt= should be =populations.txt= or
=populations.all.txt= from the "Files" section below.


#+begin_src R :tangle scripts/STRUCTURE.R
### SCRIPT DESCRIPTION ###
# Plot a horizontal barchart of membership proportions from STRUCTURE results.

## NOTES
# You may need to change `scale_fill_manual` in `plot_data_hbarchart` to match
#   the number of clusters in your analysis.
# You may need to change the interest variable to match your individuals of
#   interest.
# You may need to change the size of the final image.

## SECTIONS
# SETUP
# ARGUMENTS
# FUNCTIONS
# ANALYSIS
# DISCARDED CODE

## SETUP
library(stringr)
library(dplyr)
library(reshape2)
library(ggplot2)
library(forcats)
library(ggstance)
library(ggpubr)
library(RColorBrewer)
library(dendextend)
library(gridGraphics)
library(ggplotify)
library(ggtext)
library(glue)
library(tibble)

## ARGUMENTS

# data_file is the STRUCTURE input data
# population_file is a tab-delimited file containing accession-population mappings
args = commandArgs(trailingOnly=TRUE)
data_file = args[1]
population_file = args[2]

# If you aren't running this script from the command-line, set these values to
#   your input data and comment the args lines above.
# data_file = "structure.2.1.strct_out_f"
# population_file = "populations.txt"

## FUNCTIONS

# read STRUCTURE output and remove everything before and after
# the membership proportion data, then read the membership
# proportion data as a table and drop the row number and
# missing % columns
get_data = function(structure_in) {
  text = readChar(structure_in, file.info(structure_in)$size)
  individual_info = gsub(":", "",
                         sub(" \n\n\n.*", "",
                             sub(".*Inferred clusters\n  ", "", text)
                         )
  )
  individual_info = read.table(text = individual_info) %>% mutate(species = V2,
                                                                  population = V4) %>%
    select(-V2, -V4, -V1, -V3)
  return(individual_info)
}

# melt data to get individual rows per cluster
# keep species and population
# convert VN to N (V1 to 1, V2 to 2, ...) as cluster names
# if value < 1%, then don't label it
# else label it as rounded percent
melt_data = function(population_info) {
  melt(population_info, id.vars = c("species", "population")) %>%
    mutate(variable = as.numeric(str_replace(variable, "V", "")) - 4,
           label = ifelse(value < 0.01,
                          "",
                          ifelse (value == 1,
                                  "",
                                  paste0(round(value*100, 3), "%")
                          )
           )
    ) %>%
    select(species, population, cluster=variable, percent=value, label)
}


# Plot a horizontal barchart of the accessions faceted by population.
# The y-axis is sorted by the order variable, which is assumed to be
#   an ordering based on how the accessions cluster. See below for more
#   information.
# The labels and colors are two variables that describe how the clusters
#   should be colored and labeled in the legend. If they aren't provided, then
#   ggplot with color the clusters automatically and label them with 1, 2, 3, ...
plot_data_hbarchart = function(data, order, interest, labels = NULL, colors = NULL) {

  if (length(unique(data$cluster)) != length(colors)) {
    stop("You do not have the same number of colors and clusters.")
  }

  if (length(unique(data$cluster)) != length(labels)) {
    stop("You do not have the same number of labels and clusters.")
  }

  if (length(colors) != length(labels)) {
    stop("You do not have the same number of labels and colors")
  }

  # Remove 0 from x-axis labels.
  perc_lab <- function(x) {
    if_else(x != 0,
            scales::label_percent()(abs(x)),
            ""
    )
  }

  # Reorganize the data based on the order variable.
  # The y-axis label of species in the interest variable are colored red.
  data = merge(data, order, by.x="species", by.y="order") %>%
    arrange(rank, cluster) %>%
    mutate(species = ifelse(species %in% interest,
                            glue("<span style = 'color:red'>{species}</span>"),
                            glue("<span style = 'color:black'>{species}</span>")
    )
    ) %>%
    mutate(species = fct_reorder(as.factor(species), rank))


  # Plot the data with membership proportion as the x-axis and species on the
  #   y-axis.
  barchart = ggplot(data, aes(x = percent, y = species)) +

    # geom_bar_h is a horizontal bar plot from ggstance. Using coord_flip() to
    # flip geom_bar has issues with the facet axes.
    geom_barh(aes(fill = fct_rev(as.factor(cluster))), stat = "identity") +

    # The line below adds labels to to bars for percents > 99 and != 100.
    # geom_text(aes(x = percent, label = label), size = 2, position = position_stack(vjust = 0.5)) +

    # set title and axes labels and legend title
    labs(title = paste0("Membership in ", length(data$cluster %>% unique()), " Inferred Clusters"),
         x = "Membership",
         y = "Species",
         fill = "Inferred Cluster") +

    # set x-tick labels
    scale_x_continuous(labels=perc_lab, expand=c(0,0)) +

    # set theme and elements
    theme_minimal() +
    theme(axis.text.y = element_markdown(),      # Color species of interest on y-axis
          legend.text = element_markdown()) +    # Render markdown in legend.
    guides(fill = guide_legend(reverse = TRUE)) +

    # Facet the barchart by population.
    # Scales and space are free so that there aren't gaps in the barcharts.
    facet_grid(population ~., scales = "free_y", space = "free_y")

  if (is.null(labels) & is.null(colors)) {
    return(barchart)
  } else if (is.null(labels) | is.null(colors)) {
    stop("You must set both labels and colors. You cannot set only one.")
  } else {
    return(barchart + scale_fill_manual("Legend", labels = labels, values = colors))

  }
}

## ANALYIS

# Get raw data for membership proportion from STRUCTURE file.
raw_data = get_data(data_file)

# Melt the raw data.
data = melt_data(raw_data)

# Cluster the data based on how similarity of membership proportion.
cluster = dist(raw_data %>%
                 select(-population) %>%
                 column_to_rownames("species")
)
dend <- hclust(cluster, "ave") %>% as.dendrogram()
order = raw_data[order.dendrogram(dend),]$species
order = as.data.frame(order) %>% rownames_to_column("rank") %>%
  mutate(rank = as.numeric(rank))

# Set accessions of interest. Set to c() if there are none.
# interest = c("A1037", "A1123", "A1148", "A2038")
interest = c()

# Set colors and labels.
# If you don't set these, ggplot2 will set the colors automatically.
# The labels will be cluster number.
# The colors were used when there were three clusters. When there are two
#   clusters, blue4 represented G. herbaceum.
#   G. arboreum            = green4
#   G. herbaceum           = blue4
#   G. herbaceum (Chinese) = royalblue2

# Notice the Markdown italics formatting for the labels.
labels = c("*G. arboreum*", "*G. herbaceum*")
colors = c("1" = "blue4", "2" = "green4")

# Plot barchart and save to same location as data_file but with ".barchart.png"
#   extension.
ggsave(sub(pattern = "(.*)\\..*$", replacement = "\\1.barchart.png", data_file),
       plot_data_hbarchart(data, order, interest, labels, colors),
       width = 15,
       height = 15)

## DISCARDED CODE
# These functions were originally used to assign colors to each population
#   and produce a dendrogram of the clustering.
# The information in the cluster dendrogram was eventually added to the barchart
#   by sorting the y-axis labels by the clustering order, and this code was
#   moved to this section for documentation purposes.
# There are no guarantees that this code works with the code above.

# get colors from ColorBrewer based on number of clusters
get_colors = function(population_in) {
  populations = read.table(population_in, sep = "\t", header = T)

  # ColorBrewer complains if you choose a set that has a minimum of three colors
  # when you only have two clusters
  if (populations %>% select(population) %>% unique() %>% nrow() > 2){
    data.frame(population = populations %>% select(population) %>% unique() %>% pull(),
               color = I(brewer.pal(populations %>% select(population) %>% unique() %>% nrow(),
                                    name = 'Set1')))
  } else {
    data.frame(population = populations %>% select(population) %>% unique() %>% pull(),
               color = c("#E41A1C", "#377EB8"))
  }
}

# plot a dendrogram showing how species cluster
plot_data_dendro = function(raw_data, population_info) {

  # get colors for color bar
  bar_colors = population_info %>%
    select(species, color) %>%
    arrange(species) %>%
    unique() %>%
    select(color) %>%
    pull()

  # calculate distance of data
  cluster = dist(raw_data %>%
                   select(-population) %>%
                   column_to_rownames("species")
  )

  # make dendrogram
  dend <- hclust(cluster, "ave") %>% as.dendrogram()
  summary(dend)
  raw_data[order.dendrogram(dend),]$species
  # plot dendrogram
  dendro_plot = function() {
    par(mar=c(15,5,1,1))
    plot.new()
    dend %>%
      set("leaves_pch", 19)  %>%
      set("nodes_cex", 0.7) %>%
      plot(axes=FALSE)
    colored_bars(colors = bar_colors, dend = dend, rowLabels = "Population")
    legend("topright", legend = unique(population_info$population),
           fill=unique(population_info$color), cex=0.8)
  }

  # store plot in variable and return
  grid.echo(dendro_plot)
  p = grid.grab()
  dev.off()
  return(p)
}
#+end_src

* LEA
** Set up Data

"remove_missing_indv.rename.sample.vcf" is an intermediate file in the creation
of the STRUCTURE input for the A1+A2 filtered dataset.

#+begin_src sh :tangle scripts/A2.vcf.sh
cd $DIR ml singularity/3.5.2 vcftools vcftools --vcf
remove_missing_indv.rename.sample.vcf \ --remove $DIR/data/A1.txt \ --recode \
--recode-INFO-all \ --out A2
#+end_src

#+begin_src sh :tangle scripts/onlyA.vcf.sh
cd $DIR
ml singularity/3.5.2 vcftools
vcftools --vcf $DIR/data/all.samples.F1.SNPs.filtered4phylo.10kb.recode.vcf \
    --remove $DIR/data/F1.txt \
    --recode \
    --recode-INFO-all \
    --out $DIR/data/A1A2.all
singularity exec -B `pwd` plink_1.90b6.18--h516909a_0.sif plink --indep-pairwise 50 10 0.1 \
    --vcf $DIR/data/A1A2.all.recode.vcf \
    --allow-extra-chr \
    --set-missing-var-ids @_#
singularity exec -B `pwd` plink_1.90b6.18--h516909a_0.sif plink --vcf $DIR/data/A1A2.all.recode.vcf \
    --extract plink.prune.in --make-bed \
    --recode vcf \
    --out $DIR/data/A1A2.all.LD_filtered \
    --allow-extra-chr \
    --set-missing-var-ids @_#
#+end_src

#+begin_src sh :tangle scripts/thin.vcf.sh
cd $DIR/
ml singularity
singularity exec -B `pwd` plink_1.90b6.18--h516909a_0.sif plink --indep-pairwise 50 10 0.1 \
    --vcf $DIR/data/both.recode.vcf.gz \
    --allow-extra-chr \
    --set-missing-var-ids @_#
singularity exec -B `pwd` plink_1.90b6.18--h516909a_0.sif plink --vcf $DIR/data/both.recode.vcf \
    --extract plink.prune.in --make-bed \
    --recode vcf \
    --out $DIR/data/both.LD_filtered \
    --allow-extra-chr \
    --set-missing-var-ids @_#
#+end_src

** Running LEA

Run with =Rscript scripts/LEA.R vcf_file.vcf population_file.txt num_cpus=.
=population_file.txt= should be =populations.txt= or =populations.all.txt= from
the "Files" section below.

#+begin_src R :tangle scripts/LEA.R
### SCRIPT DESCRIPTION ###
# Run LEA or load a saved analysis and plot a horizontal barchart of membership
# proportions from "best" results.

## NOTES
# This script is likely best run interactively if you want to set the colors
#   to something specific. If you set `scale_fill_manual` to n cluster/color
#   pairings and don't have that many clusters, then the script will fail.
# You may need to change `scale_fill_manual` in `plot_data_hbarchart` to match
#   the number of clusters in your analysis.
# You may need to change the interest variable to match your individuals of
#   interest.
# You may need to change the size of the final image.

## SECTIONS
# SETUP
# ARGUMENTS
# FUNCTIONS
# ANALYSIS
# DISCARDED CODE

## SETUP
library(tibble)
library(dplyr)
library(LEA)
library(reshape2)
library(stringr)
library(ggplot2)
library(forcats)
library(ggstance)
library(RColorBrewer)
library(dendextend)
library(gridGraphics)
library(ggtext)
library(glue)

## ARGUMENTS

# data_file is the VCF input data
# population_file is a tab-delimited file containing accession-population mappings
args = commandArgs(trailingOnly=TRUE)
data_file = args[1]
population_file = args[2]
num_cpus = args[3]

# If you aren't running this script from the command-line, set these values to
#   your input data and comment the args lines above.
# data_file = "../all/A1A2.all.LD_filtered.vcf"
# population_file = "populations.all.txt"
# num_cpus = 16

## FUNCTIONS

# melt data to get individual rows per cluster
# keep species and population
# convert VN to N (V1 to 1, V2 to 2, ...) as cluster names
# if value < 1%, then don't label it
# else label it as rounded percent
melt_data = function(population_info) {
  melt(population_info, id.vars = c("species", "population")) %>%
    mutate(variable = as.numeric(str_replace(variable, "V", "")),
           label = ifelse(value < 0.01,
                          "",
                          ifelse (value == 1,
                                  "",
                                  paste0(round(value*100, 3), "%")
                          )
           )
    ) %>%
    select(species, population, cluster=variable, percent=value, label)
}

# Plot a horizontal barchart of the accessions faceted by population.
# The y-axis is sorted by the order variable, which is assumed to be
#   an ordering based on how the accessions cluster. See below for more
#   information.
# The labels and colors are two variables that describe how the clusters
#   should be colored and labeled in the legend. If they aren't provided, then
#   ggplot with color the clusters automatically and label them with 1, 2, 3, ...
plot_data_hbarchart = function(data, order, interest, labels = NULL, colors = NULL) {

  if (length(unique(data$cluster)) != length(colors)) {
    stop("You do not have the same number of colors and clusters.")
  }

  if (length(unique(data$cluster)) != length(labels)) {
    stop("You do not have the same number of labels and clusters.")
  }

  if (length(colors) != length(labels)) {
    stop("You do not have the same number of labels and colors")
  }

  # Remove 0 from x-axis labels.
  perc_lab <- function(x) {
    if_else(x != 0,
            scales::label_percent()(abs(x)),
            ""
    )
  }

  # Reorganize the data based on the order variable.
  # The y-axis label of species in the interest variable are colored red.
  data = merge(data, order, by.x="species", by.y="order") %>%
    arrange(rank, cluster) %>%
    mutate(species = ifelse(species %in% interest,
                            glue("<span style = 'color:red'>{species}</span>"),
                            glue("<span style = 'color:black'>{species}</span>")
    )
    ) %>%
    mutate(species = fct_reorder(as.factor(species), rank))


  # Plot the data with membership proportion as the x-axis and species on the
  #   y-axis.
  barchart = ggplot(data, aes(x = percent, y = species)) +

    # geom_bar_h is a horizontal bar plot from ggstance. Using coord_flip() to
    # flip geom_bar has issues with the facet axes.
    geom_barh(aes(fill = fct_rev(as.factor(cluster))), stat = "identity") +

    # The line below adds labels to to bars for percents > 99 and != 100.
    # geom_text(aes(x = percent, label = label), size = 2, position = position_stack(vjust = 0.5)) +

    # set title and axes labels and legend title
    labs(title = paste0("Membership in ", length(data$cluster %>% unique()), " Inferred Clusters"),
         x = "Membership",
         y = "Species",
         fill = "Inferred Cluster") +

    # set x-tick labels
    scale_x_continuous(labels=perc_lab, expand=c(0,0)) +

    # set theme and elements
    theme_minimal() +
    theme(axis.text.y = element_markdown(),      # Color species of interest on y-axis
          legend.text = element_markdown()) +    # Render markdown in legend.
    guides(fill = guide_legend(reverse = TRUE)) +

    # Facet the barchart by population.
    # Scales and space are free so that there aren't gaps in the barcharts.
    facet_grid(population ~., scales = "free_y", space = "free_y")

  if (is.null(labels) & is.null(colors)) {
    return(barchart)
  } else if (is.null(labels) | is.null(colors)) {
    stop("You must set both labels and colors. You cannot set only one.")
  } else {
    return(barchart + scale_fill_manual("Legend", labels = labels, values = colors))

  }
}

## ANALYSIS

# Strip the extension from data_file for later use.
file_base = file.path(sub(pattern = "(.*)\\..*$", replacement = "\\1", data_file))

# Write .geno file in working directory using data_file name for LEA analysis.
# vcf2geno(data_file, paste0(file_base, ".geno"))

# Run analysis on the .geno file for K = 1 - K = 10 with 10 reps per K and 16 CPUs.
project = snmf(geno_file,
               K = 1:10,
               entropy = T,
               repetitions = 10,
               project = "new",
               CPU = num_cpus)

# Alternatively, if the analysis has already been done, load the .snmfProject file.
# Loading the data from a saved project requires that the .snmfProject file and
#   the .snmf folder be in the same location.
# This script saves them to file_base.snmf and file_base.snmfProject.
# project = load.snmfProject("../all/A1A2.all.LD_filtered.snmfProject")

# Get best Ks by finding minimum min, mean, and max cross entropy
summary_info = summary(project)$crossEntropy

# Plot the mean cross entropy.
# Get the mean from summary_info and convert the rownames to column "K".
# Remove "K = " from the K column.
# Rename the "summary_info[2, ]" column to "mean".
# Pass this information to ggplot.
# Add a horizontal red line at the minimum cross entropy.
# Plot the cross entropy by K as a scatterplot.
# Set the x-axis labels from 1-10.
# Change the x-axis and y-axis labels and the title.
# Remove the legend.
summary_plot = as.data.frame(summary_info[2,]) %>%
  rownames_to_column("K") %>%
  mutate(K = as.numeric(str_replace(K, "K = ", ""))) %>%
  rename(mean = `summary_info[2, ]`) %>%
  ggplot() +
  geom_hline(aes(yintercept = min(summary_info[2,]), color = "red")) +
  geom_point(aes(x = K, y = mean)) +
  scale_x_continuous(breaks = c(1:10)) +
  labs(title = "Cross-entropy versus K", x = "K", y = "mean cross-entropy") +
  theme(legend.position = "none")

# Save the summary image to file_base.summary.png.
ggsave(paste0(file_base, ".summary.png"),
       summary_plot,
       width = 5,
       height = 5)

# Find the smallest cross-entropy for mininum, mean, and maximum cross-entropy.
# Remove duplicates.
# Find the smallest K among these values.
# You could also set this manually.
K = min(
  c(which.min(summary_info[1,]),
    which.min(summary_info[2,]),
    which.min(summary_info[3,])) %>%
    unique()
)

# Find the replicate with the smallest cross-entropy for the selected value of K.
best = which.min(cross.entropy(project, K = K))

# Get population information.
species_info = read.table(population_file, header = T) %>% rename(species = individual)

# Add cluster proportions to species_info.
raw_data = as.data.frame(cbind(species_info, Q(project, K, best)))

# Melt cluster info.
population_info = melt_data(raw_data)

# Cluster the data based on how similarity of membership proportion.
cluster = dist(raw_data %>%
                 select(-population) %>%
                 column_to_rownames("species")
)
dend <- hclust(cluster, "ave") %>% as.dendrogram()
order = raw_data[order.dendrogram(dend),]$species
order = as.data.frame(order) %>% rownames_to_column("rank") %>%
  mutate(rank = as.numeric(rank))

# Set accessions of interest. Set to c() if there are none.
# interest = c("A1037", "A1123", "A1148", "A2038")
interest = c()

# Set colors and labels.
# If you don't set these, ggplot2 will set the colors automatically.
# The labels will be cluster number.
# The colors were used when there were three clusters. When there are two
#   clusters, blue4 represented G. herbaceum.
#   G. arboreum            = green4
#   G. herbaceum           = blue4
#   G. herbaceum (Chinese) = royalblue2

# Notice the Markdown italics formatting for the labels.
# You'll probably need to save the file without any special labels or colors,
#   identify the clusters, and then set labels and colors.
# labels = c("*G. arboreum*", "*G. herbaceum*", "*G. herbaceum*")
# colors = c("1" = "blue4", "2" = "green4", "3" = "royalblue2")

# Plot barchart and save to same location as data_file but with
# ".K(K).barchart.png" extension, where (K) is the smallest K.
ggsave(paste0(file_base, ".K" , K, ".test.barchart.png"),
       # plot_data_hbarchart(population_info, order, interest, labels, colors),
       plot_data_hbarchart(population_info, order, interest),
       width = 15,
       height = 15)

## DISCARDED CODE
# These functions were originally used to assign colors to each population
#   and produce a dendrogram of the clustering.
# The information in the cluster dendrogram was eventually added to the barchart
#   by sorting the y-axis labels by the clustering order, and this code was
#   moved to this section for documentation purposes.
# There are no guarantees that this code works with the code above.

# get colors from ColorBrewer based on number of clusters
get_colors = function(population_in) {
  populations = read.table(population_in, sep = "\t", header = T)

  # ColorBrewer complains if you choose a set that has a minimum of three colors
  # when you only have two clusters
  if (populations %>% select(population) %>% unique() %>% nrow() > 2){
    data.frame(population = populations %>% select(population) %>% unique() %>% pull(),
               color = I(brewer.pal(populations %>% select(population) %>% unique() %>% nrow(),
                                    name = 'Set1')))
  } else {
    data.frame(population = populations %>% select(population) %>% unique() %>% pull(),
               color = c("#E41A1C", "#377EB8"))
  }
}

# plot a dendrogram showing how species cluster
plot_data_dendro = function(raw_data, population_info) {

  # get colors for color bar
  bar_colors = population_info %>%
    select(species, color) %>%
    arrange(species) %>%
    unique() %>%
    select(color) %>%
    pull()

  # calculate distance of data
  cluster = dist(raw_data %>%
                   select(-population) %>%
                   column_to_rownames("species")
  )

  # make dendrogram
  dend <- hclust(cluster, "ave") %>% as.dendrogram()
  summary(dend)
  raw_data[order.dendrogram(dend),]$species
  # plot dendrogram
  dendro_plot = function() {
    par(mar=c(15,5,1,1))
    plot.new()
    dend %>%
      set("leaves_pch", 19)  %>%
      set("nodes_cex", 0.7) %>%
      plot(axes=FALSE)
    colored_bars(colors = bar_colors, dend = dend, rowLabels = "Population")
    legend("topright", legend = unique(population_info$population),
           fill=unique(population_info$color), cex=0.8)
  }

  # store plot in variable and return
  grid.echo(dendro_plot)
  p = grid.grab()
  dev.off()
  return(p)
}
#+end_src

* Files

#+begin_src txt :tangle data/A1.txt
A1019
A1028
A1030
A1051
A1054
A1073
A1074
A1077
A1079
A1084
A1088
A1097
A1108
A1125
A1132
A1133
A1155
A1Af
A1Nisa
SRR8283996Ghe01
SRR8283998Ghe02
#+end_src

#+begin_src txt :tangle data/A2.txt
A2001
A2004
A2008
A2016
A2019
A2021
A2026
A2029
A2030
A2031
A2034
A2040
A2041
A2043
A2044
A2045
A2046
A2047
A2056
A2057
A2059
A2060
A2061
A2062
A2064
A2065
A2066
A2067
A2069
A2073
A2074
A2076
A2079
A2080
A2084
A2085
A2087
A2091
A2096
A2100
A2101
A2113
A2117
A2118
A2119
A2123
A2124
A2131
A2141
A2142
A2147
A2154
A2156
A2158
A2164
A2255
A2lintless
A2NC503
SRR8283969Gar42
SRR8283970Gar43
SRR8283971Gar40
SRR8283972Gar41
SRR8283973Gar38
SRR8283974Gar39
SRR8283975Gar36
SRR8283976Gar37
SRR8283977Gar56
SRR8283978Gar57
SRR8283979Gar58
SRR8283980Gar59
SRR8283981Gar60
SRR8283982Gar61
SRR8283983Gar44
SRR8283984Gar45
SRR8283985Gar34
SRR8283986Gar35
SRR8283987Gar32
SRR8283988Gar33
SRR8283989Gar30
SRR8283990Gar31
SRR8283991Gar03
SRR8283992Gar04
SRR8283993Gar01
SRR8283994Gar02
SRR8283995Gar65
SRR8283997Gar66
SRR8283999Gar55
SRR8284000Gar54
SRR8284001Gar53
SRR8284002Gar52
SRR8284003Gar51
SRR8284004Gar50
SRR8284005Gar49
SRR8284006Gar48
SRR8284007Gar47
SRR8284008Gar46
SRR8284009Gar62
SRR8284010Gar63
SRR8284011Gar64

#+end_src

#+COMMENT: For A1+A2 filtered
#+begin_src txt :tangle data/populations.txt
individual	population
A1019	1
A1028	1
A1030	1
A1051	1
A1054	1
A1073	1
A1074	1
A1077	1
A1079	1
A1084	1
A1088	1
A1097	1
A1108	1
A1125	1
A1132	1
A1133	1
A1155	1
A1Af	1
A1Nisa	1
SRR8283996Ghe01	1
SRR8283998Ghe02	1
A2001	2
A2004	2
A2008	2
A2016	2
A2019	2
A2021	2
A2026	2
A2029	2
A2030	2
A2031	2
A2034	2
A2040	2
A2041	2
A2043	2
A2044	2
A2045	2
A2046	2
A2047	2
A2056	2
A2057	2
A2059	2
A2060	2
A2061	2
A2062	2
A2064	2
A2065	2
A2066	2
A2067	2
A2069	2
A2073	2
A2074	2
A2076	2
A2079	2
A2080	2
A2084	2
A2085	2
A2087	2
A2091	2
A2096	2
A2100	2
A2101	2
A2113	2
A2117	2
A2118	2
A2119	2
A2123	2
A2124	2
A2131	2
A2141	2
A2142	2
A2147	2
A2154	2
A2156	2
A2158	2
A2164	2
A2255	2
A2lintless	2
A2NC503	2
SRR8283969Gar42	2
SRR8283970Gar43	2
SRR8283971Gar40	2
SRR8283972Gar41	2
SRR8283973Gar38	2
SRR8283974Gar39	2
SRR8283975Gar36	2
SRR8283976Gar37	2
SRR8283977Gar56	2
SRR8283978Gar57	2
SRR8283979Gar58	2
SRR8283980Gar59	2
SRR8283981Gar60	2
SRR8283982Gar61	2
SRR8283983Gar44	2
SRR8283984Gar45	2
SRR8283985Gar34	2
SRR8283986Gar35	2
SRR8283987Gar32	2
SRR8283988Gar33	2
SRR8283989Gar30	2
SRR8283990Gar31	2
SRR8283991Gar03	2
SRR8283992Gar04	2
SRR8283993Gar01	2
SRR8283994Gar02	2
SRR8283995Gar65	2
SRR8283997Gar66	2
SRR8283999Gar55	2
SRR8284000Gar54	2
SRR8284001Gar53	2
SRR8284002Gar52	2
SRR8284003Gar51	2
SRR8284004Gar50	2
SRR8284005Gar49	2
SRR8284006Gar48	2
SRR8284007Gar47	2
SRR8284008Gar46	2
SRR8284009Gar62	2
SRR8284010Gar63	2
SRR8284011Gar64	2
#+end_src

#+COMMENT: For A1+A2 all
#+begin_src txt :tangle data/populations.all.txt
individual	population
A1012	1
A1019	1
A1028	1
A1029	1
A1030	1
A1037	1
A1051	1
A1054	1
A1073	1
A1074	1
A1077	1
A1079	1
A1084	1
A1088	1
A1097	1
A1108	1
A1113	1
A1123	1
A1125	1
A1132	1
A1133	1
A1148	1
A1155	1
A1158	1
A1Af	1
A1Nisa	1
A2001	2
A2004	2
A2008	2
A2016	2
A2019	2
A2021	2
A2026	2
A2029	2
A2030	2
A2031	2
A2034	2
A2038	2
A2040	2
A2041	2
A2043	2
A2044	2
A2045	2
A2046	2
A2047	2
A2056	2
A2057	2
A2059	2
A2060	2
A2061	2
A2062	2
A2064	2
A2065	2
A2066	2
A2067	2
A2069	2
A2073	2
A2074	2
A2076	2
A2079	2
A2080	2
A2084	2
A2085	2
A2087	2
A2091	2
A2096	2
A2100	2
A2101	2
A2113	2
A2117	2
A2118	2
A2119	2
A2123	2
A2124	2
A2131	2
A2141	2
A2142	2
A2147	2
A2154	2
A2156	2
A2158	2
A2164	2
A2255	2
A2lintless	2
A2NC501	2
A2NC503	2
A26872	2
A26873	2
A26874	2
A26875	2
A26876	2
A26877	2
A26878	2
A26879	2
A26880	2
A26881	2
A26882	2
A26883	2
A26884	2
A26885	2
A26886	2
A26887	2
A26888	2
A26889	2
A26890	2
A26891	2
A26892	2
A26893	2
A26894	2
A26895	2
A26896	2
A26897	2
A26898	2
A26899	2
A26900	2
A26901	2
A26902	2
A26903	2
A26904	2
A26905	2
A26906	2
A26907	2
A26908	2
A26909	2
A26910	2
A26911	2
A26912	2
A26913	2
A26914	2
A26915	2
A26916	2
A26917	2
A26918	2
A26919	2
A26920	2
A26921	2
A26922	2
A26923	2
A26924	2
A26925	2
A26926	2
A16927	1
A16928	1
A26929	2
A26930	2
A26931	2
A26932	2
A26933	2
A26934	2
A26935	2
A26936	2
A26937	2
A26938	2
A26939	2
A26940	2
A26941	2
A26942	2
A26943	2
A26944	2
A26945	2
A26946	2
A26947	2
A26948	2
A26949	2
A26950	2
A26951	2
A16952	1
A16953	1
A16954	1
A16955	1
A16956	1
A16957	1
A16958	1
A16959	1
A26960	2
A16961	1
A16962	1
A26963	2
A26964	2
A26965	2
A26966	2
A26967	2
A26968	2
A26969	2
A26970	2
A26971	2
A26972	2
A26973	2
A26974	2
A26975	2
A26976	2
A26977	2
A26978	2
A16979	1
A16980	1
A16981	1
A26982	2
A26983	2
A26984	2
A26985	2
A26986	2
A26987	2
A26988	2
A26989	2
A26990	2
A26991	2
A26992	2
A26993	2
A26994	2
A26995	2
A26996	2
A26997	2
A26998	2
A26999	2
A27000	2
A27001	2
A27002	2
A27003	2
A27004	2
A27005	2
A27006	2
A27007	2
A27008	2
A27009	2
A27010	2
A27011	2
A27012	2
A27013	2
A27014	2
A27015	2
A27016	2
A27017	2
A27018	2
A27019	2
A27020	2
A27021	2
A27022	2
A27023	2
A27024	2
A27025	2
A27026	2
A27027	2
A27028	2
A27029	2
A27030	2
A27031	2
A27032	2
A27033	2
A27034	2
A27035	2
A27036	2
A27037	2
A27038	2
A27039	2
A27040	2
A27041	2
A27042	2
A27043	2
A27044	2
A27045	2
A27046	2
A27047	2
A27048	2
A27049	2
A27050	2
A27051	2
A27052	2
A27053	2
A27054	2
A27055	2
A27056	2
A27057	2
A27058	2
A27059	2
A27060	2
A27061	2
A27062	2
A27063	2
A27064	2
A27065	2
A27066	2
A27067	2
A27068	2
A27069	2
A27070	2
A27071	2
A27072	2
A27073	2
A27074	2
A27075	2
A27076	2
A27077	2
A27078	2
A27079	2
A27080	2
A27081	2
A27082	2
A27083	2
A27084	2
A27085	2
A27086	2
A27087	2
A27088	2
A27089	2
A27090	2
A27091	2
A27092	2
A27093	2
A27094	2
A27095	2
A27096	2
A27097	2
A27098	2
A27099	2
A27100	2
A27101	2
A27102	2
A27103	2
A27104	2
A27105	2
A27106	2
A27107	2
A27108	2
A27109	2
A27110	2
A27111	2
A27112	2
A27113	2
A27114	2
A2Gar42	2
A2Gar43	2
A2Gar40	2
A2Gar41	2
A2Gar38	2
A2Gar39	2
A2Gar36	2
A2Gar37	2
A2Gar56	2
A2Gar57	2
A2Gar58	2
A2Gar59	2
A2Gar60	2
A2Gar61	2
A2Gar44	2
A2Gar45	2
A2Gar34	2
A2Gar35	2
A2Gar32	2
A2Gar33	2
A2Gar30	2
A2Gar31	2
A2Gar03	2
A2Gar04	2
A2Gar01	2
A2Gar02	2
A2Gar65	2
A1Ghe01	1
A2Gar66	2
A1Ghe02	1
A2Gar55	2
A2Gar54	2
A2Gar53	2
A2Gar52	2
A2Gar51	2
A2Gar50	2
A2Gar49	2
A2Gar48	2
A2Gar47	2
A2Gar46	2
A2Gar62	2
A2Gar63	2
A2Gar64	2

#+end_src
